변수가 저장되는 공간의 특성, 자료형
1. 변수와 메모리

자료형 
	기본 자료형 
		- 숫자를 저장할 수 있는 변수 자료형
	
		숫자 
			정수형 : 소수점이 없는 수 - 예) 10, 15 ... 
				byte : 1바이트 : -2^7 ~ 2^7 - 1  / -128~127
				short : 2바이트(16bit) : -2^15 ~ 2^15 - 1
				int : 4바이트(32bit) : -2^31 ~ 2^31 - 1
				long : 8바이트(64bit) : -2^63 ~ 2^63 - 1
				
			실수형 : 소수점이 있는 수 - 예) 10.123
				float : 4바이트 
				double : 8바이트
				
		문자형 
			char : 2~3바이트  - '가'
				  : 양의 정수 
			문자표 
				- ASCII 코드 
				- 유니코드 (2~3바이트)
					3바이트 문자표 : UTF-8
		
		논리형
			boolean : 1바이트 
						  true (참)
						  false (거짓)
						  
		
	참조 자료형 
		- 주소를 가지고 값을 접근하는 변수의 자료형
		- 주소 참조
		
	
참고)
	자료 / 데이터 / 값 

2. 기본 자료형의 종류

상수와 리터럴
1. 상수 선언하기
	- 상수 : 변하지 않는 수 (constant)
	- final 예약어 변수명 앞에 추가 / final - 변경 불가
	-  이름 명명 관례 
		- 대문자로 작성 
		- 단어와 단어 사이 _로 구분 
		
		 예) final int MAX_NUMBER = 10;
	- 멤버 변수로 정의한 경우는 반드시 초기화 진행되어야 한다.	
	- 변하지 않는 값이므로 여러개가 있을 필요 X , ,하나만 메모리상에 존재 
	
참고) final : 변경할 수 없는 
		
2. 리터럴(literal)
	
	- 리터럴 상수 
	- 재료가 되는 수 (문자, 숫자, 논리값)
	- 같은 재료 -> 하나만 생성(상수)		
		
	참고)
		== : 자원의 주소 비교 
		
	
	
	- 모든 정수를 처음에는 int 인식  // 가장 효율적인 자료형 int, 숫자가 크던 작던. int 
	long num = 10000000000
			
	1) int 10000000000 -> 오류 
	
	- 모든 실수를 처음에는 double 인식 
			
	
형변환
- 자료형간 변환 

1. 묵시적 형변환
	- 자동 형변환 
	- 작은 자료형 -> 큰 자료형 
	- 정수(덜 정밀한 숫자) -> 실수(더 정밀한 숫자)
	- 연산 중 자동 형변환  : 연산은 같은 자료형만 가능  -> 연산을 위해서 자동 형변환 
		
	byte(1) -> short(2) -> int(4)  -> long(8) -> float(4) -> double(8)
				  char(3~4) 
		
		
2. 명시적 형변환
	- 강제 형변환 
	- 데이터의 유실이 발생할 가능성이 있는 경우 - 자동 형변환 X
	- 명시적으로 형변환 의사 표현 