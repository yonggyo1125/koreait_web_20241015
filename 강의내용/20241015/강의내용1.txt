실습환경 구축하기
1. 자바 설치하기 : JDK23 / 21 / 17
	CRTL + SHIFT + B : 즐겨찾기 탭 
	
	JDK - Java Development Kit 
			참고) Kit - Aid Kit
	
	 long-term support - LTS : 장기 지원 버전(3년)
	
2. 환경변수 설정하기
JAVA_HOME : 자바가 설치되어 있는 경로

C:\Program Files\Java\jdk-17
C:\Program Files\Java\jdk-17\bin 
	- 실행 파일이 있는 폴더 

	java.exe  : class 파일 실행 
	javac.exe : java -> class 컴파일 
	javadoc.exe : java api 문서를 생성

- 환경 변수 등록 목적 : 어떤 경로라도 항상 접근 가능 설정 

jdk : Java Development Kit 

13. 인텔리제이 
IDE : 개발 툴

[ ] : 대괄호
{ } : 중괄호 
() : 소괄호


Hello.java -> 컴파일?(javac.exe) -> Hello.class -> java.exe Hello(실행)
- 컴파일 기반 언어


4. 기타
패키지 : 폴더

패키지가 설정 되지 않으면 : src 폴더 / default 패키지(기본 패키지)

package 패키지명;




변수와 자료형
1. 컴퓨터는 데이터를 어떻게 표현할까?
	- 반도체 
	전기 신호가 있으면 1
	전기 신호가 없으면 0
	-> 2진수
	
2. 10진수와 2진수
1100100 - 2진수 

10진수 : 100

bit : 1,0으로 표현할 수 있는 최소 단위

8bit -> 1byte

1byte :  -2^7 ~ 2^7 - 1   // -128~127

3. 부호있는 수를 표현하는 방법
1bit : 부호 비트 (0 - 양수, 1 - 음수)

1byte = -2^7 ~ 2^7 - 1 (-128~127)

컴퓨터에서 인식하는 모든 값? 숫자

		

변수란 무엇일까?
1. 변수란?
	Computer : 계산기 
			- 연산 
			
	- 변하는 수
	- 공간의 이름 
	- 공간 : 메모리 
	- 자료형 : 메모리 크기 
	
	참고) 숫자, 데이터, 자료 
	
	메모리, 이름, 자료형
		
	자료형 : 공간의 크기 
	
2. 변수 선언하고 값 대입하기
	자료형 변수명;
	int 변수;
	
	변수 선언 : 값을 담을 수 있는 공간(메모리)이 할당
	
	자료형 변수명 = 값;
	
	참고)
		주석(comment) : 설명
		// 한줄 설명	
		/*
			여러줄 설명...
			여러줄 설명...
		*/
	
3. 변수 초기화하기
	변수에 최초로 값을 대입(저장) 하는 것 
	
	자료형 변수명 = 값;  - 선언과 동시에 초기화
	
4. 변수 이름 정하기
	1) 알파벳, 숫자, 특수문자($, _)
		참고) 한글도 가능 - 지양
		
	2) 숫자는 변수명 앞에 사용 불가 
	3) 예약어는 사용 불가(return, throw, if ...)
	4) 유의미한 단어로 변수명 구성 
		
		int $dollar; - O
		int 1st; - X
		int student-num; - X
		int _order; - O
		int numOfOrders; - O
		int float; - X
		
		int numberOfStudent 
		- 낙타 표기법(Camel Case) : 첫 단어만 제외하고 단어의 첫 문자를 대문자 표기'
		
		참고)
			클래스명 
			예) 주문정보 
				class OrderInfo {
				
				}
			
			OrderInfo
			- 파스칼 표기법 : 모든 단어의 첫 문자를 대문자로 표기
			(클래스명)
참고)
	주석 - 설명, 컴파일러가 해석 X, 제거
		// - 한줄 주석 
		/*
			여러줄 주석 
			....
		*/
		
		/**  설명 주석 
		*
		*
		*/
	2) 프로그램 실행 배제 - 해석 X -> 실행 X
	
변수가 저장되는 공간의 특성, 자료형
1. 변수와 메모리

자료형 
	기본 자료형 
		 - 숫자를 담는 자료형 
		
		숫자형
			정수
				byte(1바이트) : -2^7 ~ 2^7 -1 (-128~127)
				short(2바이트): -2^15 ~ 2^15 -1
				int(4바이트) : -2^31 ~ 2^31 - 1
				long(8바이트) : -2^63 ~ 2^63 - 1
				
			실수 : 소수점이 있는 수
				float(4바이트)
				double(8바이트)
			
		문자형 : 문자 1개  값은 작은 따옴표('...')
			char(2~3바이트) : 양의 정수(unsigned)
				참고)
					1byte : -128~127
					unsigned byte : 1byte ~ 0~255
			
			아스키코드(ASCII) : 1바이트 내에서 정의한 문자표
			
			유니코드(2~3바이트 문자표) : 한글 표현 가능
				- 2바이트 : EUC-KR, CPC949 / 한글 한자를 2바이트로 표현
				- 3바이트 : UTF-8 / 한글 한자를 3바이트로 표현
		 
		논리형 : 참(true), 거짓(false)
			boolean(1byte)
			
			
		 
	참조 자료형 
		: 자원의 주소만 가지고 있는 변수를 선언하는 자료형 

2. 기본 자료형의 종류

1) 정수 자료형
	byte : 1바이트(8비트) -2^7 ~ 2^7 -1 (-126~125)
	short : 2바이트(16비트)  -2^15~2^15 - 1 
	int    : 4바이트(32비트) -2^31~2^31 - 1
	long  : 8바이트(64비트) -2^63~2^63 - 1
	
2) 문자 자료형
	char : 2바이트 
	
		참고) 숫자 변수에 대입 숫자 그대로 대입 
				문자를 변수에 대입할 경우 '문자'
				
				숫자 - 문자 : 아스키코드(1byte)
									/ 양의 정수 
									unsigned : 양의 정수 
									0~255
									
									- 영문, 특수문자 
				숫자 - 한글 :  유니코드(2byte, 3byte)
				
3) 실수 자료형
	- 소수점을 가지고 있는 숫자 
	float : 4byte
			- 숫자 끝에 F(f)를 추가 
			
	double : 8byte
	
4) 논리자료형
	- 참, 거짓 (true, false)
	boolean

상수와 리터럴
1. 상수 선언하기
	- 상수 : 변하지 않는 수 (constant)
	- final 예약어 변수명 앞에 추가 
	-  이름 명명 관례 
		- 대문자로 작성 
		- 단어와 단어 사이 _로 구분 
		
		 예) final int MAX_NUMBER = 10;
	- 멤버 변수로 정의한 경우는 반드시 초기화 진행되어야 한다.	
	- 변하지 않는 값이므로 여러개가 있을 필요 X , ,하나만 메모리상에 존재 
	
참고) final : 변경할 수 없는 
		
2. 리터럴(literal)
	
	- 리터럴 상수 
	- 재료가 되는 수 (문자, 숫자, 논리값)
	- 같은 재료 -> 하나만 생성(상수)		
	
	참고)
		== : 자원의 주소 비교 
		
	
	
	- 모든 정수를 처음에는 int 인식  // 가장 효율적인 자료형 int, 숫자가 크던 작던. int 
	long num = 10000000000
			
	1) int 10000000000 -> 오류 
	
	- 모든 실수를 처음에는 double 인식 
			
	
형변환
- 자료형간 변환 

1. 묵시적 형변환
	- 자동 형변환 
	- 작은 자료형 -> 큰 자료형 
	- 정수(덜 정밀한 숫자) -> 실수(더 정밀한 숫자)
	- 연산 중 자동 형변환  : 연산은 같은 자료형만 가능  -> 연산을 위해서 자동 형변환 
		
	byte(1) -> short(2) -> int(4)  -> long(8) -> float(4) -> double(8)
				  char(3~4) 
		
		
2. 명시적 형변환
	- 데이터의 유실이 발생할 가능성이 있는 경우 - 자동 형변환 X
	- 명시적으로 형변환 의사 표현 